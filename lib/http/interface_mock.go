// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package http is a generated GoMock package.
package http

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	auth "github.com/openrelayxyz/din-caddy-plugins/auth"
)

// MockIHTTPClient is a mock of IHTTPClient interface.
type MockIHTTPClient struct {
	ctrl     *gomock.Controller
	recorder *MockIHTTPClientMockRecorder
}

// MockIHTTPClientMockRecorder is the mock recorder for MockIHTTPClient.
type MockIHTTPClientMockRecorder struct {
	mock *MockIHTTPClient
}

// NewMockIHTTPClient creates a new mock instance.
func NewMockIHTTPClient(ctrl *gomock.Controller) *MockIHTTPClient {
	mock := &MockIHTTPClient{ctrl: ctrl}
	mock.recorder = &MockIHTTPClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIHTTPClient) EXPECT() *MockIHTTPClientMockRecorder {
	return m.recorder
}

// Post mocks base method.
func (m *MockIHTTPClient) Post(url string, headers map[string]string, payload []byte, auth auth.AuthClient) ([]byte, *int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Post", url, headers, payload, auth)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(*int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Post indicates an expected call of Post.
func (mr *MockIHTTPClientMockRecorder) Post(url, headers, payload, auth interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Post", reflect.TypeOf((*MockIHTTPClient)(nil).Post), url, headers, payload, auth)
}
