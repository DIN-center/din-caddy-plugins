// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package modules is a generated GoMock package.
package modules

import (
	http "net/http"
	reflect "reflect"

	v2 "github.com/caddyserver/caddy/v2"
	caddyfile "github.com/caddyserver/caddy/v2/caddyconfig/caddyfile"
	caddyhttp "github.com/caddyserver/caddy/v2/modules/caddyhttp"
	reverseproxy "github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy"
	gomock "github.com/golang/mock/gomock"
)

// MockIDinMiddleware is a mock of IDinMiddleware interface.
type MockIDinMiddleware struct {
	ctrl     *gomock.Controller
	recorder *MockIDinMiddlewareMockRecorder
}

// MockIDinMiddlewareMockRecorder is the mock recorder for MockIDinMiddleware.
type MockIDinMiddlewareMockRecorder struct {
	mock *MockIDinMiddleware
}

// NewMockIDinMiddleware creates a new mock instance.
func NewMockIDinMiddleware(ctrl *gomock.Controller) *MockIDinMiddleware {
	mock := &MockIDinMiddleware{ctrl: ctrl}
	mock.recorder = &MockIDinMiddlewareMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIDinMiddleware) EXPECT() *MockIDinMiddlewareMockRecorder {
	return m.recorder
}

// CaddyModule mocks base method.
func (m *MockIDinMiddleware) CaddyModule() v2.ModuleInfo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CaddyModule")
	ret0, _ := ret[0].(v2.ModuleInfo)
	return ret0
}

// CaddyModule indicates an expected call of CaddyModule.
func (mr *MockIDinMiddlewareMockRecorder) CaddyModule() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CaddyModule", reflect.TypeOf((*MockIDinMiddleware)(nil).CaddyModule))
}

// Provision mocks base method.
func (m *MockIDinMiddleware) Provision(context v2.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Provision", context)
	ret0, _ := ret[0].(error)
	return ret0
}

// Provision indicates an expected call of Provision.
func (mr *MockIDinMiddlewareMockRecorder) Provision(context interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Provision", reflect.TypeOf((*MockIDinMiddleware)(nil).Provision), context)
}

// ServeHTTP mocks base method.
func (m *MockIDinMiddleware) ServeHTTP(rw http.ResponseWriter, r *http.Request, next caddyhttp.Handler) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServeHTTP", rw, r, next)
	ret0, _ := ret[0].(error)
	return ret0
}

// ServeHTTP indicates an expected call of ServeHTTP.
func (mr *MockIDinMiddlewareMockRecorder) ServeHTTP(rw, r, next interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServeHTTP", reflect.TypeOf((*MockIDinMiddleware)(nil).ServeHTTP), rw, r, next)
}

// UnmarshalCaddyfile mocks base method.
func (m *MockIDinMiddleware) UnmarshalCaddyfile(dispenser *caddyfile.Dispenser) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnmarshalCaddyfile", dispenser)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnmarshalCaddyfile indicates an expected call of UnmarshalCaddyfile.
func (mr *MockIDinMiddlewareMockRecorder) UnmarshalCaddyfile(dispenser interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnmarshalCaddyfile", reflect.TypeOf((*MockIDinMiddleware)(nil).UnmarshalCaddyfile), dispenser)
}

// MockIDinSelect is a mock of IDinSelect interface.
type MockIDinSelect struct {
	ctrl     *gomock.Controller
	recorder *MockIDinSelectMockRecorder
}

// MockIDinSelectMockRecorder is the mock recorder for MockIDinSelect.
type MockIDinSelectMockRecorder struct {
	mock *MockIDinSelect
}

// NewMockIDinSelect creates a new mock instance.
func NewMockIDinSelect(ctrl *gomock.Controller) *MockIDinSelect {
	mock := &MockIDinSelect{ctrl: ctrl}
	mock.recorder = &MockIDinSelectMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIDinSelect) EXPECT() *MockIDinSelectMockRecorder {
	return m.recorder
}

// CaddyModule mocks base method.
func (m *MockIDinSelect) CaddyModule() v2.ModuleInfo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CaddyModule")
	ret0, _ := ret[0].(v2.ModuleInfo)
	return ret0
}

// CaddyModule indicates an expected call of CaddyModule.
func (mr *MockIDinSelectMockRecorder) CaddyModule() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CaddyModule", reflect.TypeOf((*MockIDinSelect)(nil).CaddyModule))
}

// Provision mocks base method.
func (m *MockIDinSelect) Provision(context v2.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Provision", context)
	ret0, _ := ret[0].(error)
	return ret0
}

// Provision indicates an expected call of Provision.
func (mr *MockIDinSelectMockRecorder) Provision(context interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Provision", reflect.TypeOf((*MockIDinSelect)(nil).Provision), context)
}

// Select mocks base method.
func (m *MockIDinSelect) Select(pool reverseproxy.UpstreamPool, r *http.Request, rw http.ResponseWriter) *reverseproxy.Upstream {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Select", pool, r, rw)
	ret0, _ := ret[0].(*reverseproxy.Upstream)
	return ret0
}

// Select indicates an expected call of Select.
func (mr *MockIDinSelectMockRecorder) Select(pool, r, rw interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Select", reflect.TypeOf((*MockIDinSelect)(nil).Select), pool, r, rw)
}

// UnmarshalCaddyfile mocks base method.
func (m *MockIDinSelect) UnmarshalCaddyfile(dispenser *caddyfile.Dispenser) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnmarshalCaddyfile", dispenser)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnmarshalCaddyfile indicates an expected call of UnmarshalCaddyfile.
func (mr *MockIDinSelectMockRecorder) UnmarshalCaddyfile(dispenser interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnmarshalCaddyfile", reflect.TypeOf((*MockIDinSelect)(nil).UnmarshalCaddyfile), dispenser)
}

// handleRequestMetric mocks base method.
func (m *MockIDinSelect) handleRequestMetric(bodyBytes []byte, service, provider string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "handleRequestMetric", bodyBytes, service, provider)
}

// handleRequestMetric indicates an expected call of handleRequestMetric.
func (mr *MockIDinSelectMockRecorder) handleRequestMetric(bodyBytes, service, provider interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "handleRequestMetric", reflect.TypeOf((*MockIDinSelect)(nil).handleRequestMetric), bodyBytes, service, provider)
}

// MockIDinUpstreams is a mock of IDinUpstreams interface.
type MockIDinUpstreams struct {
	ctrl     *gomock.Controller
	recorder *MockIDinUpstreamsMockRecorder
}

// MockIDinUpstreamsMockRecorder is the mock recorder for MockIDinUpstreams.
type MockIDinUpstreamsMockRecorder struct {
	mock *MockIDinUpstreams
}

// NewMockIDinUpstreams creates a new mock instance.
func NewMockIDinUpstreams(ctrl *gomock.Controller) *MockIDinUpstreams {
	mock := &MockIDinUpstreams{ctrl: ctrl}
	mock.recorder = &MockIDinUpstreamsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIDinUpstreams) EXPECT() *MockIDinUpstreamsMockRecorder {
	return m.recorder
}

// CaddyModule mocks base method.
func (m *MockIDinUpstreams) CaddyModule() v2.ModuleInfo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CaddyModule")
	ret0, _ := ret[0].(v2.ModuleInfo)
	return ret0
}

// CaddyModule indicates an expected call of CaddyModule.
func (mr *MockIDinUpstreamsMockRecorder) CaddyModule() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CaddyModule", reflect.TypeOf((*MockIDinUpstreams)(nil).CaddyModule))
}

// GetUpstreams mocks base method.
func (m *MockIDinUpstreams) GetUpstreams(r *http.Request) ([]*reverseproxy.Upstream, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUpstreams", r)
	ret0, _ := ret[0].([]*reverseproxy.Upstream)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUpstreams indicates an expected call of GetUpstreams.
func (mr *MockIDinUpstreamsMockRecorder) GetUpstreams(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUpstreams", reflect.TypeOf((*MockIDinUpstreams)(nil).GetUpstreams), r)
}

// UnmarshalCaddyfile mocks base method.
func (m *MockIDinUpstreams) UnmarshalCaddyfile(dispenser *caddyfile.Dispenser) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnmarshalCaddyfile", dispenser)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnmarshalCaddyfile indicates an expected call of UnmarshalCaddyfile.
func (mr *MockIDinUpstreamsMockRecorder) UnmarshalCaddyfile(dispenser interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnmarshalCaddyfile", reflect.TypeOf((*MockIDinUpstreams)(nil).UnmarshalCaddyfile), dispenser)
}
