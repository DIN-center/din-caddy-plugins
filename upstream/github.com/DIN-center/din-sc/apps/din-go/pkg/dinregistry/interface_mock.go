// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package dinregistry is a generated GoMock package.
package dinregistry

import (
	big "math/big"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	ethgo "github.com/umbracle/ethgo"
	jsonrpc "github.com/umbracle/ethgo/jsonrpc"
)

// MockIDinRegistryHandler is a mock of IDinRegistryHandler interface.
type MockIDinRegistryHandler struct {
	ctrl     *gomock.Controller
	recorder *MockIDinRegistryHandlerMockRecorder
}

// MockIDinRegistryHandlerMockRecorder is the mock recorder for MockIDinRegistryHandler.
type MockIDinRegistryHandlerMockRecorder struct {
	mock *MockIDinRegistryHandler
}

// NewMockIDinRegistryHandler creates a new mock instance.
func NewMockIDinRegistryHandler(ctrl *gomock.Controller) *MockIDinRegistryHandler {
	mock := &MockIDinRegistryHandler{ctrl: ctrl}
	mock.recorder = &MockIDinRegistryHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIDinRegistryHandler) EXPECT() *MockIDinRegistryHandlerMockRecorder {
	return m.recorder
}

// GetAllNetworkAddresses mocks base method.
func (m *MockIDinRegistryHandler) GetAllNetworkAddresses() ([]ethgo.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllNetworkAddresses")
	ret0, _ := ret[0].([]ethgo.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllNetworkAddresses indicates an expected call of GetAllNetworkAddresses.
func (mr *MockIDinRegistryHandlerMockRecorder) GetAllNetworkAddresses() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllNetworkAddresses", reflect.TypeOf((*MockIDinRegistryHandler)(nil).GetAllNetworkAddresses))
}

// GetAllNetworkMethodNames mocks base method.
func (m *MockIDinRegistryHandler) GetAllNetworkMethodNames(network string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllNetworkMethodNames", network)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllNetworkMethodNames indicates an expected call of GetAllNetworkMethodNames.
func (mr *MockIDinRegistryHandlerMockRecorder) GetAllNetworkMethodNames(network interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllNetworkMethodNames", reflect.TypeOf((*MockIDinRegistryHandler)(nil).GetAllNetworkMethodNames), network)
}

// GetAllNetworkMethods mocks base method.
func (m *MockIDinRegistryHandler) GetAllNetworkMethods(network string) ([]Method, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllNetworkMethods", network)
	ret0, _ := ret[0].([]Method)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllNetworkMethods indicates an expected call of GetAllNetworkMethods.
func (mr *MockIDinRegistryHandlerMockRecorder) GetAllNetworkMethods(network interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllNetworkMethods", reflect.TypeOf((*MockIDinRegistryHandler)(nil).GetAllNetworkMethods), network)
}

// GetAllProviders mocks base method.
func (m *MockIDinRegistryHandler) GetAllProviders() ([]ProviderHandler, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllProviders")
	ret0, _ := ret[0].([]ProviderHandler)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllProviders indicates an expected call of GetAllProviders.
func (mr *MockIDinRegistryHandlerMockRecorder) GetAllProviders() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllProviders", reflect.TypeOf((*MockIDinRegistryHandler)(nil).GetAllProviders))
}

// GetNetworkAddressByName mocks base method.
func (m *MockIDinRegistryHandler) GetNetworkAddressByName(network string) (*ethgo.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworkAddressByName", network)
	ret0, _ := ret[0].(*ethgo.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetworkAddressByName indicates an expected call of GetNetworkAddressByName.
func (mr *MockIDinRegistryHandlerMockRecorder) GetNetworkAddressByName(network interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkAddressByName", reflect.TypeOf((*MockIDinRegistryHandler)(nil).GetNetworkAddressByName), network)
}

// GetNetworkCapabilities mocks base method.
func (m *MockIDinRegistryHandler) GetNetworkCapabilities(network string) (*big.Int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworkCapabilities", network)
	ret0, _ := ret[0].(*big.Int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetworkCapabilities indicates an expected call of GetNetworkCapabilities.
func (mr *MockIDinRegistryHandlerMockRecorder) GetNetworkCapabilities(network interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkCapabilities", reflect.TypeOf((*MockIDinRegistryHandler)(nil).GetNetworkCapabilities), network)
}

// GetNetworkOperationsConfig mocks base method.
func (m *MockIDinRegistryHandler) GetNetworkOperationsConfig(network string) (*NetworkConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworkOperationsConfig", network)
	ret0, _ := ret[0].(*NetworkConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetworkOperationsConfig indicates an expected call of GetNetworkOperationsConfig.
func (mr *MockIDinRegistryHandlerMockRecorder) GetNetworkOperationsConfig(network interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkOperationsConfig", reflect.TypeOf((*MockIDinRegistryHandler)(nil).GetNetworkOperationsConfig), network)
}

// GetProvidersByNetwork mocks base method.
func (m *MockIDinRegistryHandler) GetProvidersByNetwork(network string) ([]ProviderHandler, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProvidersByNetwork", network)
	ret0, _ := ret[0].([]ProviderHandler)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProvidersByNetwork indicates an expected call of GetProvidersByNetwork.
func (mr *MockIDinRegistryHandlerMockRecorder) GetProvidersByNetwork(network interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProvidersByNetwork", reflect.TypeOf((*MockIDinRegistryHandler)(nil).GetProvidersByNetwork), network)
}

// MockINetworkHandler is a mock of INetworkHandler interface.
type MockINetworkHandler struct {
	ctrl     *gomock.Controller
	recorder *MockINetworkHandlerMockRecorder
}

// MockINetworkHandlerMockRecorder is the mock recorder for MockINetworkHandler.
type MockINetworkHandlerMockRecorder struct {
	mock *MockINetworkHandler
}

// NewMockINetworkHandler creates a new mock instance.
func NewMockINetworkHandler(ctrl *gomock.Controller) *MockINetworkHandler {
	mock := &MockINetworkHandler{ctrl: ctrl}
	mock.recorder = &MockINetworkHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockINetworkHandler) EXPECT() *MockINetworkHandlerMockRecorder {
	return m.recorder
}

// GetAllMethods mocks base method.
func (m *MockINetworkHandler) GetAllMethods() ([]Method, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllMethods")
	ret0, _ := ret[0].([]Method)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllMethods indicates an expected call of GetAllMethods.
func (mr *MockINetworkHandlerMockRecorder) GetAllMethods() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllMethods", reflect.TypeOf((*MockINetworkHandler)(nil).GetAllMethods))
}

// GetCapabilities mocks base method.
func (m *MockINetworkHandler) GetCapabilities() (*big.Int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCapabilities")
	ret0, _ := ret[0].(*big.Int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCapabilities indicates an expected call of GetCapabilities.
func (mr *MockINetworkHandlerMockRecorder) GetCapabilities() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCapabilities", reflect.TypeOf((*MockINetworkHandler)(nil).GetCapabilities))
}

// GetMethodId mocks base method.
func (m *MockINetworkHandler) GetMethodId(name string) (uint8, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMethodId", name)
	ret0, _ := ret[0].(uint8)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMethodId indicates an expected call of GetMethodId.
func (mr *MockINetworkHandlerMockRecorder) GetMethodId(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMethodId", reflect.TypeOf((*MockINetworkHandler)(nil).GetMethodId), name)
}

// GetMethodName mocks base method.
func (m *MockINetworkHandler) GetMethodName(bit uint8) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMethodName", bit)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMethodName indicates an expected call of GetMethodName.
func (mr *MockINetworkHandlerMockRecorder) GetMethodName(bit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMethodName", reflect.TypeOf((*MockINetworkHandler)(nil).GetMethodName), bit)
}

// GetNetworkName mocks base method.
func (m *MockINetworkHandler) GetNetworkName() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworkName")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetworkName indicates an expected call of GetNetworkName.
func (mr *MockINetworkHandlerMockRecorder) GetNetworkName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkName", reflect.TypeOf((*MockINetworkHandler)(nil).GetNetworkName))
}

// GetNetworkOperationsConfig mocks base method.
func (m *MockINetworkHandler) GetNetworkOperationsConfig() (*NetworkConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworkOperationsConfig")
	ret0, _ := ret[0].(*NetworkConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetworkOperationsConfig indicates an expected call of GetNetworkOperationsConfig.
func (mr *MockINetworkHandlerMockRecorder) GetNetworkOperationsConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkOperationsConfig", reflect.TypeOf((*MockINetworkHandler)(nil).GetNetworkOperationsConfig))
}

// GetNetworkOwner mocks base method.
func (m *MockINetworkHandler) GetNetworkOwner() (*ethgo.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworkOwner")
	ret0, _ := ret[0].(*ethgo.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetworkOwner indicates an expected call of GetNetworkOwner.
func (mr *MockINetworkHandlerMockRecorder) GetNetworkOwner() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkOwner", reflect.TypeOf((*MockINetworkHandler)(nil).GetNetworkOwner))
}

// IsMethodSupported mocks base method.
func (m *MockINetworkHandler) IsMethodSupported(bit uint8) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsMethodSupported", bit)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsMethodSupported indicates an expected call of IsMethodSupported.
func (mr *MockINetworkHandlerMockRecorder) IsMethodSupported(bit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsMethodSupported", reflect.TypeOf((*MockINetworkHandler)(nil).IsMethodSupported), bit)
}

// MockINetworkServiceHandler is a mock of INetworkServiceHandler interface.
type MockINetworkServiceHandler struct {
	ctrl     *gomock.Controller
	recorder *MockINetworkServiceHandlerMockRecorder
}

// MockINetworkServiceHandlerMockRecorder is the mock recorder for MockINetworkServiceHandler.
type MockINetworkServiceHandlerMockRecorder struct {
	mock *MockINetworkServiceHandler
}

// NewMockINetworkServiceHandler creates a new mock instance.
func NewMockINetworkServiceHandler(ctrl *gomock.Controller) *MockINetworkServiceHandler {
	mock := &MockINetworkServiceHandler{ctrl: ctrl}
	mock.recorder = &MockINetworkServiceHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockINetworkServiceHandler) EXPECT() *MockINetworkServiceHandlerMockRecorder {
	return m.recorder
}

// GetAllMethodNames mocks base method.
func (m *MockINetworkServiceHandler) GetAllMethodNames() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllMethodNames")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllMethodNames indicates an expected call of GetAllMethodNames.
func (mr *MockINetworkServiceHandlerMockRecorder) GetAllMethodNames() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllMethodNames", reflect.TypeOf((*MockINetworkServiceHandler)(nil).GetAllMethodNames))
}

// GetCapabilities mocks base method.
func (m *MockINetworkServiceHandler) GetCapabilities() (*big.Int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCapabilities")
	ret0, _ := ret[0].(*big.Int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCapabilities indicates an expected call of GetCapabilities.
func (mr *MockINetworkServiceHandlerMockRecorder) GetCapabilities() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCapabilities", reflect.TypeOf((*MockINetworkServiceHandler)(nil).GetCapabilities))
}

// GetNetworkAddress mocks base method.
func (m *MockINetworkServiceHandler) GetNetworkAddress() (*ethgo.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworkAddress")
	ret0, _ := ret[0].(*ethgo.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetworkAddress indicates an expected call of GetNetworkAddress.
func (mr *MockINetworkServiceHandlerMockRecorder) GetNetworkAddress() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkAddress", reflect.TypeOf((*MockINetworkServiceHandler)(nil).GetNetworkAddress))
}

// GetNetworkServiceStatus mocks base method.
func (m *MockINetworkServiceHandler) GetNetworkServiceStatus() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworkServiceStatus")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetworkServiceStatus indicates an expected call of GetNetworkServiceStatus.
func (mr *MockINetworkServiceHandlerMockRecorder) GetNetworkServiceStatus() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkServiceStatus", reflect.TypeOf((*MockINetworkServiceHandler)(nil).GetNetworkServiceStatus))
}

// GetNetworkServiceURL mocks base method.
func (m *MockINetworkServiceHandler) GetNetworkServiceURL() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworkServiceURL")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetworkServiceURL indicates an expected call of GetNetworkServiceURL.
func (mr *MockINetworkServiceHandlerMockRecorder) GetNetworkServiceURL() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkServiceURL", reflect.TypeOf((*MockINetworkServiceHandler)(nil).GetNetworkServiceURL))
}

// IsMethodSupported mocks base method.
func (m *MockINetworkServiceHandler) IsMethodSupported(bit uint8) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsMethodSupported", bit)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsMethodSupported indicates an expected call of IsMethodSupported.
func (mr *MockINetworkServiceHandlerMockRecorder) IsMethodSupported(bit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsMethodSupported", reflect.TypeOf((*MockINetworkServiceHandler)(nil).IsMethodSupported), bit)
}

// MockIProviderHandler is a mock of IProviderHandler interface.
type MockIProviderHandler struct {
	ctrl     *gomock.Controller
	recorder *MockIProviderHandlerMockRecorder
}

// MockIProviderHandlerMockRecorder is the mock recorder for MockIProviderHandler.
type MockIProviderHandlerMockRecorder struct {
	mock *MockIProviderHandler
}

// NewMockIProviderHandler creates a new mock instance.
func NewMockIProviderHandler(ctrl *gomock.Controller) *MockIProviderHandler {
	mock := &MockIProviderHandler{ctrl: ctrl}
	mock.recorder = &MockIProviderHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIProviderHandler) EXPECT() *MockIProviderHandlerMockRecorder {
	return m.recorder
}

// GetAllNetworkServiceAddresses mocks base method.
func (m *MockIProviderHandler) GetAllNetworkServiceAddresses() ([]ethgo.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllNetworkServiceAddresses")
	ret0, _ := ret[0].([]ethgo.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllNetworkServiceAddresses indicates an expected call of GetAllNetworkServiceAddresses.
func (mr *MockIProviderHandlerMockRecorder) GetAllNetworkServiceAddresses() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllNetworkServiceAddresses", reflect.TypeOf((*MockIProviderHandler)(nil).GetAllNetworkServiceAddresses))
}

// GetAuthConfig mocks base method.
func (m *MockIProviderHandler) GetAuthConfig() (*NetworkServiceAuthConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthConfig")
	ret0, _ := ret[0].(*NetworkServiceAuthConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuthConfig indicates an expected call of GetAuthConfig.
func (mr *MockIProviderHandlerMockRecorder) GetAuthConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthConfig", reflect.TypeOf((*MockIProviderHandler)(nil).GetAuthConfig))
}

// GetName mocks base method.
func (m *MockIProviderHandler) GetName() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetName")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetName indicates an expected call of GetName.
func (mr *MockIProviderHandlerMockRecorder) GetName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetName", reflect.TypeOf((*MockIProviderHandler)(nil).GetName))
}

// GetProviderOwner mocks base method.
func (m *MockIProviderHandler) GetProviderOwner() (*ethgo.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProviderOwner")
	ret0, _ := ret[0].(*ethgo.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProviderOwner indicates an expected call of GetProviderOwner.
func (mr *MockIProviderHandlerMockRecorder) GetProviderOwner() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProviderOwner", reflect.TypeOf((*MockIProviderHandler)(nil).GetProviderOwner))
}

// GetProviderStatus mocks base method.
func (m *MockIProviderHandler) GetProviderStatus() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProviderStatus")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProviderStatus indicates an expected call of GetProviderStatus.
func (mr *MockIProviderHandlerMockRecorder) GetProviderStatus() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProviderStatus", reflect.TypeOf((*MockIProviderHandler)(nil).GetProviderStatus))
}

// MockIContractHandler is a mock of IContractHandler interface.
type MockIContractHandler struct {
	ctrl     *gomock.Controller
	recorder *MockIContractHandlerMockRecorder
}

// MockIContractHandlerMockRecorder is the mock recorder for MockIContractHandler.
type MockIContractHandlerMockRecorder struct {
	mock *MockIContractHandler
}

// NewMockIContractHandler creates a new mock instance.
func NewMockIContractHandler(ctrl *gomock.Controller) *MockIContractHandler {
	mock := &MockIContractHandler{ctrl: ctrl}
	mock.recorder = &MockIContractHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIContractHandler) EXPECT() *MockIContractHandlerMockRecorder {
	return m.recorder
}

// Call mocks base method.
func (m *MockIContractHandler) Call(method string, args ...interface{}) (interface{}, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{method}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Call", varargs...)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Call indicates an expected call of Call.
func (mr *MockIContractHandlerMockRecorder) Call(method interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{method}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Call", reflect.TypeOf((*MockIContractHandler)(nil).Call), varargs...)
}

// GetContractAddress mocks base method.
func (m *MockIContractHandler) GetContractAddress() *ethgo.Address {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContractAddress")
	ret0, _ := ret[0].(*ethgo.Address)
	return ret0
}

// GetContractAddress indicates an expected call of GetContractAddress.
func (mr *MockIContractHandlerMockRecorder) GetContractAddress() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContractAddress", reflect.TypeOf((*MockIContractHandler)(nil).GetContractAddress))
}

// GetEthClient mocks base method.
func (m *MockIContractHandler) GetEthClient() *jsonrpc.Client {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEthClient")
	ret0, _ := ret[0].(*jsonrpc.Client)
	return ret0
}

// GetEthClient indicates an expected call of GetEthClient.
func (mr *MockIContractHandlerMockRecorder) GetEthClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEthClient", reflect.TypeOf((*MockIContractHandler)(nil).GetEthClient))
}
